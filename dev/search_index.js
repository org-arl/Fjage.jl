var documenterSearchIndex = {"docs":
[{"location":"Fjage.html#Fjage","page":"Fjage","title":"Fjage","text":"","category":"section"},{"location":"Fjage.html","page":"Fjage","title":"Fjage","text":"Modules = [Fjage]\nPages   = [\"Fjage.jl\"]","category":"page"},{"location":"Fjage.html#Fjage.Fjage","page":"Fjage","title":"Fjage.Fjage","text":"Julia-fj√•ge gateway, standalone container, and slave container.\n\nNotes:\n\nThis implementation is not thread-safe.\n\n\n\n\n\n","category":"module"},{"location":"Fjage.html#Fjage.default_timeout-Tuple{Any}","page":"Fjage","title":"Fjage.default_timeout","text":"default_timeout(millis)\n\nSet default timeout for requests. This timeout is used when not explicitly specified. The timeout is given in milliseconds.\n\n\n\n\n\n","category":"method"},{"location":"aid.html#AgentIDs","page":"AgentIDs","title":"AgentIDs","text":"","category":"section"},{"location":"aid.html#API","page":"AgentIDs","title":"API","text":"","category":"section"},{"location":"aid.html","page":"AgentIDs","title":"AgentIDs","text":"Modules = [Fjage]\nPages   = [\"aid.jl\"]","category":"page"},{"location":"aid.html#Fjage.AgentID","page":"AgentIDs","title":"Fjage.AgentID","text":"An identifier for an agent or a topic.\n\n\n\n\n\n","category":"type"},{"location":"aid.html#Fjage.AgentID-2","page":"AgentIDs","title":"Fjage.AgentID","text":"aid = AgentID(name[, istopic])\naid = AgentID(name[, owner])\naid = AgentID(name[, istopic[, owner]])\n\nCreate an AgentID, optionally with an owner.\n\n\n\n\n\n","category":"type"},{"location":"aid.html#Base.:<<-Tuple{AgentID, Any}","page":"AgentIDs","title":"Base.:<<","text":"rsp = aid << msg\n\nSend a request via the gateway to the specified agent, and wait for a response.\n\n\n\n\n\n","category":"method"},{"location":"aid.html#Fjage.request","page":"AgentIDs","title":"Fjage.request","text":"rsp = request(aid, msg[, timeout])\n\nSend a request via the gateway to the specified agent, and wait for a response. The response is returned. The agentID (aid) specified must be an \"owned\" agentID obtained from the agent(gw, name) function or returned by the agentforservice(gw, service) function. The timeout is specified in milliseconds, and defaults to 1 second if unspecified.\n\n\n\n\n\n","category":"function"},{"location":"aid.html#Fjage.send-Tuple{AgentID, Any}","page":"AgentIDs","title":"Fjage.send","text":"send(aid, msg)\n\nSend a message via the gateway to the specified agent. The agentID (aid) specified must be an \"owned\" agentID obtained from the agent(gw, name) function or returned by the agentforservice(gw, service) function.\n\n\n\n\n\n","category":"method"},{"location":"aid.html#Fjage.topic-Tuple{String}","page":"AgentIDs","title":"Fjage.topic","text":"aid = topic([owner,] name[, subtopic])\n\nCreates an AgentID for a named topic, optionally owned by an owner. AgentIDs that are associated with gateways/agents can be used directly in send() and request() calls.\n\n\n\n\n\n","category":"method"},{"location":"msg.html#Messages","page":"Messages","title":"Messages","text":"","category":"section"},{"location":"msg.html","page":"Messages","title":"Messages","text":"Messages are data containers that carry information between agents. When interacting with Java/Groovy agents, messages are mapped to Java/Groovy message classes with fields with the same name as the keys in the message.","category":"page"},{"location":"msg.html","page":"Messages","title":"Messages","text":"Message types are defined using the @message macro. For example:","category":"page"},{"location":"msg.html","page":"Messages","title":"Messages","text":"@message \"org.arl.fjage.shell.ShellExecReq\" struct ShellExecReq\n  cmd::Union{String,Nothing} = nothing\n  script::Union{String,Nothing} = nothing\n  args::Vector{String} = String[]\n  ans::Bool = false\nend","category":"page"},{"location":"msg.html","page":"Messages","title":"Messages","text":"defines a ShellExecReq message type that maps to a Java class with the package org.arl.fjage.shell.ShellExecReq.","category":"page"},{"location":"msg.html","page":"Messages","title":"Messages","text":"All messages are mutable. The @message macro also automatically adds a few fields:","category":"page"},{"location":"msg.html","page":"Messages","title":"Messages","text":"performative::Symbol\nmessageID::String\ninReplyTo::String\nsender::AgentID\nrecipient::AgentID\nsentAt::Int64","category":"page"},{"location":"msg.html","page":"Messages","title":"Messages","text":"Messages can subtype other messages:","category":"page"},{"location":"msg.html","page":"Messages","title":"Messages","text":"julia> abstract type MyAbstractMessage <: Message end\n\njulia> @message \"org.arl.fjage.demo.MyConcreteMessage\" struct MyConcreteMessage <: MyAbstractMessage\n        a::Int\n      end\n\njulia> MyConcreteMessage(a=1)\nMyConcreteMessage:INFORM[a:1]\n\njulia> MyConcreteMessage(a=1) isa MyAbstractMessage\ntrue","category":"page"},{"location":"msg.html","page":"Messages","title":"Messages","text":"It is also possible to have a concrete message type that can also be a supertype of another message:","category":"page"},{"location":"msg.html","page":"Messages","title":"Messages","text":"julia> abstract type SomeMessage <: Message end\n\njulia> @message \"org.arl.fjage.demo.SomeMessage\" struct SomeMessage <: SomeMessage\n        a::Int\n      end\n\njulia> @message \"org.arl.fjage.demo.SomeExtMessage\" struct SomeExtMessage <: SomeMessage\n        a::Int\n        b::Int\n      end\n\njulia> SomeMessage(a=1) isa SomeMessage\ntrue\n\njulia> SomeExtMessage(a=1, b=2) isa SomeMessage\ntrue","category":"page"},{"location":"msg.html","page":"Messages","title":"Messages","text":"Performatives are guessed automatically based on message classname. By default, the performative is Performative.INFORM. If a message classname ends with a Req, the default performative changes to Performative.REQUEST. Performatives may be overridden at declaration or at construction (and are mutable):","category":"page"},{"location":"msg.html","page":"Messages","title":"Messages","text":"julia> @message \"org.arl.fjage.demo.SomeReq\" struct SomeReq end;\njulia> @message \"org.arl.fjage.demo.SomeRsp\" Performative.AGREE struct SomeRsp end;\n\njulia> SomeReq().performative\n:REQUEST\n\njulia> SomeRsp().performative\n:AGREE\n\njulia> SomeRsp(performative=Performative.INFORM).performative\n:INFORM","category":"page"},{"location":"msg.html","page":"Messages","title":"Messages","text":"When strict typing is not required, one can use the dictionary-like GenericMessage message type:","category":"page"},{"location":"msg.html","page":"Messages","title":"Messages","text":"julia> msg = GenericMessage(\"org.arl.fjage.demo.DynamicMessage\")\nDynamicMessage:INFORM\n\njulia> msg.a = 1\n1\n\njulia> msg.b = \"xyz\"\n\"xyz\"\n\njulia> msg\nDynamicMessage:INFORM[a:1 b:\"xyz\"]\n\njulia> classname(msg)\n\"org.arl.fjage.demo.DynamicMessage\"\n\njulia> msg isa GenericMessage\ntrue","category":"page"},{"location":"msg.html#API","page":"Messages","title":"API","text":"","category":"section"},{"location":"msg.html","page":"Messages","title":"Messages","text":"Modules = [Fjage]\nPages   = [\"msg.jl\"]","category":"page"},{"location":"msg.html#Fjage.GenericMessage","page":"Messages","title":"Fjage.GenericMessage","text":"Generic message type that can carry arbitrary name-value pairs as data.\n\n\n\n\n\n","category":"type"},{"location":"msg.html#Fjage.Message","page":"Messages","title":"Fjage.Message","text":"Base class for messages transmitted by one agent to another.\n\n\n\n\n\n","category":"type"},{"location":"msg.html#Fjage.Message-2","page":"Messages","title":"Fjage.Message","text":"msg = Message([perf])\nmsg = Message(inreplyto[, perf])\n\nCreate a message with just a performative (perf) and no data. If the performative is not specified, it defaults to INFORM. If the inreplyto is specified, the message inReplyTo and recipient fields are set accordingly.\n\n\n\n\n\n","category":"type"},{"location":"msg.html#Fjage.ParameterReq","page":"Messages","title":"Fjage.ParameterReq","text":"Parameter request message.\n\n\n\n\n\n","category":"type"},{"location":"msg.html#Fjage.ParameterRsp","page":"Messages","title":"Fjage.ParameterRsp","text":"Parameter response message.\n\n\n\n\n\n","category":"type"},{"location":"msg.html#Base.get!-Tuple{ParameterReq, Any}","page":"Messages","title":"Base.get!","text":"get!(p::ParameterReq, param)\n\nRequest parameter param to be fetched.\n\nExamples\n\njulia> p = ParameterReq(index=1)\nParameterReq[index=1]\njulia> get!(p, \"modulation\")\nParameterReq[index=1 modulation=?]\njulia> get!(p, \"fec\")\nParameterReq[index=1 modulation=? ...]\n\n\n\n\n\n","category":"method"},{"location":"msg.html#Base.get-Tuple{ParameterRsp, Any}","page":"Messages","title":"Base.get","text":"get(p::ParameterRsp, param)\n\nExtract parameter param from a parameter response message.\n\n\n\n\n\n","category":"method"},{"location":"msg.html#Fjage.classname","page":"Messages","title":"Fjage.classname","text":"classname(msg::Message)\n\nReturn the fully qualified class name of a message.\n\n\n\n\n\n","category":"function"},{"location":"msg.html#Fjage.registermessages","page":"Messages","title":"Fjage.registermessages","text":"registermessages()\nregistermessages(messageclasses)\n\nRegister message classes with Fjage. Usually message classes are automatically registered on creation with @message. However, when developing packages, if @message is used at the module level, the types may be precompiled and the code to register the classes may not get executed at runtime. In such cases, you may need to explicitly call registermessages() in the __init()__ function for the module.\n\n\n\n\n\n","category":"function"},{"location":"msg.html#Fjage.set!-Tuple{ParameterReq, Any, Any}","page":"Messages","title":"Fjage.set!","text":"set!(p::ParameterReq, param, value)\n\nRequest parameter param to be set to value.\n\nExamples\n\njulia> p = ParameterReq(index=1)\nParameterReq[index=1]\njulia> set!(p, \"modulation\", \"ofdm\")\nParameterReq[index=1 modulation=ofdm]\njulia> set!(p, \"fec\", 1)\nParameterReq[index=1 modulation=ofdm ...]\n\n\n\n\n\n","category":"method"},{"location":"msg.html#Fjage.@message-Tuple{Any, Any, Any}","page":"Messages","title":"Fjage.@message","text":"@message classname [performative] struct mtype [<: supertype]\n  fields...\nend\n\nCreate a message class from a fully qualified class name. If a performative is not specified, it is guessed based on the class name. For class names ending with \"Req\", the performative is assumed to be REQUEST, and for all other messages, INFORM.\n\nExamples\n\njulia> @message \"org.arl.fjage.shell.MyShellExecReq\" struct MyShellExecReq\n         cmd::String\n       end\njulia> req = MyShellExecReq(cmd=\"ps\")\nMyShellExecReq:REQUEST[cmd:\"ps\"]\n\n\n\n\n\n","category":"macro"},{"location":"gw.html#Gateway","page":"Gateway","title":"Gateway","text":"","category":"section"},{"location":"gw.html#Example-usage","page":"Gateway","title":"Example usage","text":"","category":"section"},{"location":"gw.html","page":"Gateway","title":"Gateway","text":"In Julia REPL:","category":"page"},{"location":"gw.html","page":"Gateway","title":"Gateway","text":"julia> using Fjage\njulia> gw = Gateway(\"localhost\", 1100);\njulia> shell = agentforservice(gw, \"org.arl.fjage.shell.Services.SHELL\")\nshell\njulia> shell.language\n\"Groovy\"\njulia> request(gw, ShellExecReq(recipient=shell, cmd=\"ps\"))\nAGREE\njulia> request(shell, ShellExecReq(cmd=\"ps\"))\nAGREE\njulia> shell << ShellExecReq(cmd=\"ps\")\nAGREE\njulia> close(gw)","category":"page"},{"location":"gw.html","page":"Gateway","title":"Gateway","text":"For more information, see fj√•ge gateway API specifications.","category":"page"},{"location":"gw.html#Gateway-API-documentation","page":"Gateway","title":"Gateway API documentation","text":"","category":"section"},{"location":"gw.html","page":"Gateway","title":"Gateway","text":"Modules = [Fjage]\nPages   = [\"gw.jl\"]","category":"page"},{"location":"gw.html#Fjage.Gateway","page":"Gateway","title":"Fjage.Gateway","text":"gw = Gateway([name,] host, port)\n\nOpen a new TCP/IP gateway to communicate with fj√•ge agents from Julia.\n\n\n\n\n\n","category":"type"},{"location":"gw.html#Base.close-Tuple{Gateway}","page":"Gateway","title":"Base.close","text":"Close a gateway connection to the master container.\n\n\n\n\n\n","category":"method"},{"location":"gw.html#Base.flush-Tuple{Gateway}","page":"Gateway","title":"Base.flush","text":"Flush the incoming message queue.\n\n\n\n\n\n","category":"method"},{"location":"gw.html#Fjage.agentforservice-Tuple{Gateway, String}","page":"Gateway","title":"Fjage.agentforservice","text":"Find an agent that provides a named service.\n\n\n\n\n\n","category":"method"},{"location":"gw.html#Fjage.agentsforservice-Tuple{Gateway, String}","page":"Gateway","title":"Fjage.agentsforservice","text":"Find all agents that provides a named service.\n\n\n\n\n\n","category":"method"},{"location":"gw.html#Fjage.name-Tuple{Gateway}","page":"Gateway","title":"Fjage.name","text":"name(gw)\n\nGet the name of the gateway.\n\n\n\n\n\n","category":"method"},{"location":"gw.html#Fjage.receive","page":"Gateway","title":"Fjage.receive","text":"msg = receive(gw[, filter][, timeout])\n\nReceive an incoming message from other agents or topics. Timeout is specified in milliseconds. If no timeout is specified, the call is non-blocking. If a negative timeout is specified, the call is blocking until a message is available.\n\nIf a filter is specified, only messages matching the filter are retrieved. A filter may be a message type, a message or a function. If it is a message type, only messages of that type or a subtype are retrieved. If it is a message, any message whose inReplyTo field is set to the msgID of the specified message is retrieved. If it is a function, it must take in a message and return true or false. A message for which it returns true is retrieved.\n\n\n\n\n\n","category":"function"},{"location":"gw.html#Fjage.request","page":"Gateway","title":"Fjage.request","text":"rsp = request(gw, msg[, timeout])\n\nSend a request via the gateway to the specified agent, and wait for a response. The response is returned. The recipient field of the request message (msg) must be populated with an agentID. The timeout is specified in milliseconds, and defaults to 1 second if unspecified.\n\n\n\n\n\n","category":"function"},{"location":"gw.html#Fjage.send-Tuple{Gateway, Any}","page":"Gateway","title":"Fjage.send","text":"send(gw, msg)\n\nSend a message via the gateway to the specified agent. The recipient field of the message must be populated with an agentID.\n\n\n\n\n\n","category":"method"},{"location":"gw.html#Fjage.subscribe-Tuple{Gateway, AgentID}","page":"Gateway","title":"Fjage.subscribe","text":"Subscribe to receive all messages sent to the given topic.\n\n\n\n\n\n","category":"method"},{"location":"gw.html#Fjage.unsubscribe-Tuple{Gateway, AgentID}","page":"Gateway","title":"Fjage.unsubscribe","text":"Unsubscribe from receiving messages sent to the given topic.\n\n\n\n\n\n","category":"method"},{"location":"const.html#Constants","page":"Constants","title":"Constants","text":"","category":"section"},{"location":"const.html","page":"Constants","title":"Constants","text":"Modules = [Fjage]\nPages   = [\"const.jl\"]","category":"page"},{"location":"const.html#Fjage.ShellExecReq","page":"Constants","title":"Fjage.ShellExecReq","text":"Shell command execution request message.\n\n\n\n\n\n","category":"type"},{"location":"container.html#Agents,-Behaviors-and-Containers","page":"Agents, Behaviors & Containers","title":"Agents, Behaviors & Containers","text":"","category":"section"},{"location":"container.html","page":"Agents, Behaviors & Containers","title":"Agents, Behaviors & Containers","text":"Fjage.jl currently supports standalone containers and slave containers. Standalone containers may be used to deploy Julia-only agent applications. Slave containers are used to connect to Java master containers that host multi-language agent applications.","category":"page"},{"location":"container.html","page":"Agents, Behaviors & Containers","title":"Agents, Behaviors & Containers","text":"The agents, behaviors and containers API is modeled on the Java version, and hence the fj√•ge developer's guide provides a good introduction to developing agents.","category":"page"},{"location":"container.html#Example","page":"Agents, Behaviors & Containers","title":"Example","text":"","category":"section"},{"location":"container.html","page":"Agents, Behaviors & Containers","title":"Agents, Behaviors & Containers","text":"using Fjage\n\n@agent struct MyAgent\n  count::Int = 0\nend\n\nfunction Fjage.startup(a::MyAgent)\n  add(a, TickerBehavior(5000) do a, b\n    a.count += 1\n    @info \"Tick $(a.count)\"\n  end)\nend\n\n# start the agent in a container\nc = Container()\nadd(c, \"myagent\", MyAgent())\nstart(c)\n\n# when you've had enough, shutdown the container\nsleep(30)\nshutdown(c)","category":"page"},{"location":"container.html","page":"Agents, Behaviors & Containers","title":"Agents, Behaviors & Containers","text":"More examples are available in the examples folder for reference.","category":"page"},{"location":"container.html#Agent,-Behaviors-and-Container-API","page":"Agents, Behaviors & Containers","title":"Agent, Behaviors & Container API","text":"","category":"section"},{"location":"container.html","page":"Agents, Behaviors & Containers","title":"Agents, Behaviors & Containers","text":"Modules = [Fjage]\nPages   = [\"container.jl\"]","category":"page"},{"location":"container.html#Fjage.AgentID-Tuple{Agent}","page":"Agents, Behaviors & Containers","title":"Fjage.AgentID","text":"AgentID(a::Agent)\n\nGet the AgentID of the agent.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.Container","page":"Agents, Behaviors & Containers","title":"Fjage.Container","text":"Container()\nContainer(platform::Platform)\nContainer(platform::Platform, name)\n\nCreate a standalone container running on a real-time platform (if unspecified). If a name is not specified, a unique name is randomly generated.\n\n\n\n\n\n","category":"type"},{"location":"container.html#Fjage.CyclicBehavior-Tuple{Any}","page":"Agents, Behaviors & Containers","title":"Fjage.CyclicBehavior","text":"CyclicBehavior(action)\n\nCreate a cyclic behavior that runs repeatedly at the earliest available opportunity. The action(a::Agent, b::Behavior) function is called when the behavior runs. The onstart and onend fields in the behavior may be set to functions that are called when the behavior is initialized and terminates. Both functions are called with similar parameters as action.\n\nThe running of cyclic behaviors may be controlled using block(b), restart(b) and stop(b).\n\nExamples:\n\nusing Fjage\n\n@agent struct MyAgent end\n\nfunction Fjage.startup(a::MyAgent)\n  add(a, CyclicBehavior() do a, b\n    @info \"CyclicBehavior running...\"\n  end)\nend\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.MessageBehavior-Tuple{Any}","page":"Agents, Behaviors & Containers","title":"Fjage.MessageBehavior","text":"MessageBehavior(action, millis)\nMessageBehavior(action, filt, millis)\n\nCreate a behavior that runs every time a message arrives. The action(a::Agent, b::Behavior, msg) function is called when a message arrives. The onstart and onend fields in the behavior may be set to functions that are called when the behavior is initialized and terminates. Both functions are called with similar parameters as action.\n\nIf a filter filt is specified, only messages matching the filter trigger this behavior. A filter may be a message class or a function that takes the message as an argument and returns true to accept, false to reject.\n\nIf multiple MessageBehavior that match a message are active, only one of them will receive the message. The behavior to receive is the message is chosen based on its priority field. Messages with filters are given higher default priority than ones without filters.\n\nThe default init() for an agent automatically adds a MessageBehavior to dispatch messages to a processrequest() or processmessage() method. An agent may therefore process messages by providing methods for those functions. However, if an agent provides its own init() method, it should use MessageBehavior to handle incoming messages.\n\nExamples:\n\nusing Fjage\n\nconst MySpecialNtf = MessageClass(@__MODULE__, \"MySpecialNtf\")\n\n@agent struct MyAgent end\n\nfunction Fjage.init(a::MyAgent)\n  add(a, MessageBehavior(MySpecialNtf) do a, b, msg\n    @info \"Got a special message: $msg\"\n  end)\n  add(a, MessageBehavior() do a, b, msg\n    @info \"Got a not-so-special message: $msg\"\n  end)\nend\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.OneShotBehavior-Tuple{Any}","page":"Agents, Behaviors & Containers","title":"Fjage.OneShotBehavior","text":"OneShotBehavior(action)\n\nCreate a one-shot behavior that runs exactly once at the earliest available opportunity. The action(a::Agent, b::Behavior) function is called when the behavior runs. The onstart and onend fields in the behavior may be set to functions that are called when the behavior is initialized and terminates. Both functions are called with similar parameters as action.\n\nExamples:\n\nusing Fjage\n\n@agent struct MyAgent end\n\nfunction Fjage.startup(a::MyAgent)\n  add(a, OneShotBehavior() do a, b\n    @info \"OneShotBehavior just ran\"\n  end)\nend\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.PoissonBehavior-Tuple{Any, Int64}","page":"Agents, Behaviors & Containers","title":"Fjage.PoissonBehavior","text":"PoissonBehavior(action, millis)\n\nCreate a behavior that runs randomly, on an averge once every millis milliseconds. The action(a::Agent, b::Behavior) function is called when the behavior runs. The onstart and onend fields in the behavior may be set to functions that are called when the behavior is initialized and terminates. Both functions are called with similar parameters as action.\n\nExamples:\n\nusing Fjage\n\n@agent struct MyAgent end\n\nfunction Fjage.startup(a::MyAgent)\n  add(a, PoissonBehavior(5000) do a, b\n    @info \"PoissonBehavior ran!\"\n  end)\nend\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.RealTimePlatform","page":"Agents, Behaviors & Containers","title":"Fjage.RealTimePlatform","text":"Real-time platform.\n\n\n\n\n\n","category":"type"},{"location":"container.html#Fjage.SlaveContainer","page":"Agents, Behaviors & Containers","title":"Fjage.SlaveContainer","text":"Slave container.\n\n\n\n\n\n","category":"type"},{"location":"container.html#Fjage.SlaveContainer-Tuple{Any, Any}","page":"Agents, Behaviors & Containers","title":"Fjage.SlaveContainer","text":"SlaveContainer(host, port)\nSlaveContainer(host, port, name)\nSlaveContainer(platform::Platform, host, port)\nSlaveContainer(platform::Platform, host, port, name)\n\nCreate a slave container running on a real-time platform (if unspecified), optionally with a specified name. If a name is not specified, a unique name is randomly generated.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.StandaloneContainer","page":"Agents, Behaviors & Containers","title":"Fjage.StandaloneContainer","text":"Standalone container.\n\n\n\n\n\n","category":"type"},{"location":"container.html#Fjage.TickerBehavior-Tuple{Any, Int64}","page":"Agents, Behaviors & Containers","title":"Fjage.TickerBehavior","text":"TickerBehavior(action, millis)\n\nCreate a behavior that runs periodically every millis milliseconds. The action(a::Agent, b::Behavior) function is called when the behavior runs. The onstart and onend fields in the behavior may be set to functions that are called when the behavior is initialized and terminates. Both functions are called with similar parameters as action.\n\nExamples:\n\nusing Fjage\n\n@agent struct MyAgent end\n\nfunction Fjage.startup(a::MyAgent)\n  add(a, TickerBehavior(5000) do a, b\n    @info \"Tick!\"\n  end)\nend\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.WakerBehavior-Tuple{Any, Int64}","page":"Agents, Behaviors & Containers","title":"Fjage.WakerBehavior","text":"WakerBehavior(action, millis)\n\nCreate a behavior that runs exactly once after millis milliseconds. The action(a::Agent, b::Behavior) function is called when the behavior runs. The onstart and onend fields in the behavior may be set to functions that are called when the behavior is initialized and terminates. Both functions are called with similar parameters as action.\n\nExamples:\n\nusing Fjage\n\n@agent struct MyAgent end\n\nfunction Fjage.startup(a::MyAgent)\n  add(a, WakerBehavior(5000) do a, b\n    @info \"Awake after 5 seconds!\"\n  end)\nend\n\n\n\n\n\n","category":"method"},{"location":"container.html#Base.flush-Tuple{Agent}","page":"Agents, Behaviors & Containers","title":"Base.flush","text":"flush(a::Agent)\n\nFlush agent's incoming message queue.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Base.kill-Tuple{Container, String}","page":"Agents, Behaviors & Containers","title":"Base.kill","text":"kill(container::Container, aid::AgentID)\nkill(container::Container, name::String)\nkill(container::Container, agent::Agent)\n\nStop an agent running in a container.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Base.wait-Tuple{RealTimePlatform}","page":"Agents, Behaviors & Containers","title":"Base.wait","text":"wait(platform::Platform)\n\nWait for platform to finish running. Blocks until all containers running on the platform have shutdown.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.BackoffBehavior-Tuple{Any, Int64}","page":"Agents, Behaviors & Containers","title":"Fjage.BackoffBehavior","text":"BackoffBehavior(action, millis)\n\nCreate a behavior that runs after millis milliseconds. The action(a::Agent, b::Behavior) function is called when the behavior runs. The behavior may be scheduled to re-run in t milliseconds by calling backoff(b, t).\n\nThe onstart and onend fields in the behavior may be set to functions that are called when the behavior is initialized and terminates. Both functions are called with similar parameters as action.\n\nThe BackoffBehavior constructor is simply syntactic sugar for a WakerBehavior that is intended to be rescheduled often using backoff().\n\nExamples:\n\nusing Fjage\n\n@agent struct MyAgent end\n\nfunction Fjage.startup(a::MyAgent)\n  # a behavior that will run for the first time in 5 seconds, and subsequently\n  # every 2 seconds\n  add(a, BackoffBehavior(5000) do a, b\n    @info \"Backoff!\"\n    backoff(b, 2000)\n  end)\nend\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.ParameterMessageBehavior-Tuple{}","page":"Agents, Behaviors & Containers","title":"Fjage.ParameterMessageBehavior","text":"ParameterMessageBehavior()\n\nParameterMessageBehavior simplifies the task of an agent wishing to support parameters via ParameterReq and ParameterRsp messages. An agent providing parameters can advertise its parameters by providing an implementation for the params(a) method (or params(a, ndx) method for indexed parameters). The method returns a list of name-symbol pairs. Each entry represents a parameter with the specified name, and dispatched using the specified symbol. Get and set requests for the parameter are dispatched to get(a, Val(symbol)) and set(a, Val(symbol), value) methods (or get(a, Val(symbol), ndx) and set(a, Val(symbol), ndx, value) for indexed parameters). If the method isn't defined, and an agent struct field with the same name is present, it is used to back the parameter.\n\nSetters should return the value that is set, so that it can be sent back to the requesting agent. If a setter returns nothing, the actual value is fetched using the getter and then sent to the requesting agent.\n\nAn agent may choose to avoid advertising specific parameters by defining isunlisted(Val(symbol)) method for the parameter to return true. Similarly, an agent may choose to mark a parameter as read-only by defining the isreadonly(Val(symbol)) method for the parameter to return true.\n\nParameter change events may be captured by defining a onparamchange(a::Agent, b::Behavior, param, ndx, value) method for the parameter.\n\nThe default init() for an agent automatically adds a ParameterMessageBehavior to dispatch handle parameters for an agent, and so an agent can benefit from this behavior without explicitly adding it. If an agent provides its own init() method and wishes to support parameters, it should add this behavior during init().\n\nExamples:\n\nusing Fjage\n\n@agent struct MyAgent\n  param1::Int = 1\n  param2::Float64 = 0.0\n  secret::String = \"top secret message\"\n  x::Int = 2\nend\n\nFjage.param(a::MyAgent) = [\n  \"MyAgent.param1\" => :param1,    # backed by a.param1\n  \"MyAgent.param2\" => :param2,    # backed by a.param2, but readonly\n  \"MyAgent.X\" => :X,              # backed by getter and setter\n  \"MyAgent.Y\" => :Y,              # backed by getter only, so readonly\n  \"MyAgent.secret\" => :secret     # backed by a.secret, but unlisted\n]\n\nFjage.isreadonly(a::MyAgent, ::Val{:param2}) = true\nFjage.isunlisted(a::MyAgent, ::Val{:secret}) = true\n\nFjage.get(a::MyAgent, ::Val{:X}) = a.x\nFjage.set(a::MyAgent, ::Val{:X}, value) = (a.x = clamp(value, 0, 10))\nFjage.get(a::MyAgent, ::Val{:Y}) = a.x + 27\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.action","page":"Agents, Behaviors & Containers","title":"Fjage.action","text":"action(b::Behavior)\n\nThe action function for a behavior is repeatedly called when a behavior runs. Typically, each type of Behavior provides an action method that implements its intended behavior.\n\n\n\n\n\n","category":"function"},{"location":"container.html#Fjage.add-Tuple{Agent, Behavior}","page":"Agents, Behaviors & Containers","title":"Fjage.add","text":"add(a::Agent, b::Behavior)\n\nAdd a behavior to an agent.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.add-Tuple{Container, String, Agent}","page":"Agents, Behaviors & Containers","title":"Fjage.add","text":"add(container::Container, agent)\nadd(container::Container, name, agent)\n\nRun an agent in a container. If the name is not specified, a unique name is randomly generated.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.add-Tuple{RealTimePlatform, Container}","page":"Agents, Behaviors & Containers","title":"Fjage.add","text":"add(platform::Platform, container::Container)\n\nRun a container on a platform.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.addlistener-Tuple{Container, Any}","page":"Agents, Behaviors & Containers","title":"Fjage.addlistener","text":"addlistener(container::Container, listener)\n\nAdd message listener to container. Unimplemented.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.agent-Tuple{Agent, String}","page":"Agents, Behaviors & Containers","title":"Fjage.agent","text":"agent(a::Agent, name::String)\n\nGenerate an owned AgentID for an agent with the given name.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.agent-Tuple{Behavior}","page":"Agents, Behaviors & Containers","title":"Fjage.agent","text":"agent(b::Behavior)\n\nGet the agent owning the behavior.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.agent-Tuple{Container, String}","page":"Agents, Behaviors & Containers","title":"Fjage.agent","text":"agent(container::Container, aid::AgentID)\nagent(container::Container, name::String)\n\nGet the agent ID of an agent specified by name or its agent ID.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.agentforservice-Tuple{Agent, String}","page":"Agents, Behaviors & Containers","title":"Fjage.agentforservice","text":"agentforservice(a::Agent, svc::String)\n\nFind an agent providing a specified service. Returns an owned AgentID for the service provider, if one is found, nothing otherwise.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.agentforservice-Tuple{StandaloneContainer, String, Agent}","page":"Agents, Behaviors & Containers","title":"Fjage.agentforservice","text":"agentforservice(c::Container, svc::String, owner::Agent)\n\nLookup any agent providing the service svc, and return an AgentID owned by owner. Returns nothing if no agent providing specified service found.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.agents-Tuple{Container}","page":"Agents, Behaviors & Containers","title":"Fjage.agents","text":"agents(container::Container)\n\nGet list of agents running in the container.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.agentsforservice-Tuple{Agent, String}","page":"Agents, Behaviors & Containers","title":"Fjage.agentsforservice","text":"agentsforservice(a::Agent, svc::String)\n\nGet a list of agents providing a specified service. Returns a list of owned AgentID for the service providers. The list may be empty if no service providers are found.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.agentsforservice-Tuple{StandaloneContainer, String, Agent}","page":"Agents, Behaviors & Containers","title":"Fjage.agentsforservice","text":"agentsforservice(c::Container, svc::String, owner::Agent)\n\nLookup all agents providing the service svc, and return list of AgentID owned by owner. Returns an empty list if no agent providing specified service found.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.autoclone!-Tuple{Container, Bool}","page":"Agents, Behaviors & Containers","title":"Fjage.autoclone!","text":"autoclone!(container::Container, b)\n\nConfigure container to automatically clone (or not clone) messages on send. Currently auto-cloning is unimplemented, and so b can only be false.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.autoclone-Tuple{Container}","page":"Agents, Behaviors & Containers","title":"Fjage.autoclone","text":"autoclone(container::Container)\n\nCheck if the container is configured to automatically clone messages on send.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.backoff-Tuple{WakerBehavior, Int64}","page":"Agents, Behaviors & Containers","title":"Fjage.backoff","text":"backoff(b::WakerBehavior, millis)\n\nSchedule the behavior to re-run in millis milliseconds.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.block-Tuple{Behavior}","page":"Agents, Behaviors & Containers","title":"Fjage.block","text":"block(b::Behavior)\nblock(b::Behavior, millis)\n\nMarks a behavior as blocked, and prevents it from running until it is restarted using restart(b). If millis is specified, the behavior is automatically restarted after millis milliseconds.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.buildversion-Tuple{RealTimePlatform}","page":"Agents, Behaviors & Containers","title":"Fjage.buildversion","text":"buildversion(platform::Platform)\n\nGet build version of the platform.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.canlocateagent-Tuple{StandaloneContainer, Any}","page":"Agents, Behaviors & Containers","title":"Fjage.canlocateagent","text":"canlocateagent(container::Container, aid::AgentID)\ncanlocateagent(container::Container, name::String)\n\nCheck if an agent is running in the container, or in any of the remote containers.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.container-Tuple{Agent}","page":"Agents, Behaviors & Containers","title":"Fjage.container","text":"container(a::Agent)\n\nGet container in which the agent is running.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.containers-Tuple{RealTimePlatform}","page":"Agents, Behaviors & Containers","title":"Fjage.containers","text":"containers(platform::Platform)\n\nGet list of containers running on the platform.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.containsagent-Tuple{Container, AgentID}","page":"Agents, Behaviors & Containers","title":"Fjage.containsagent","text":"containsagent(container::Container, aid::AgentID)\ncontainsagent(container::Container, name::String)\n\nCheck if an agent is running in the container.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.currenttimemillis-Tuple{Agent}","page":"Agents, Behaviors & Containers","title":"Fjage.currenttimemillis","text":"currenttimemillis(a::Agent)\n\nGet current time in milliseconds for the agent.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.currenttimemillis-Tuple{RealTimePlatform}","page":"Agents, Behaviors & Containers","title":"Fjage.currenttimemillis","text":"currenttimemillis(platform::Platform)\n\nGet current time in milliseconds for the platform.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.delay-Tuple{Agent, Any}","page":"Agents, Behaviors & Containers","title":"Fjage.delay","text":"delay(a::Agent, millis)\n\nDelay the execution of the agent by millis milliseconds.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.delay-Tuple{RealTimePlatform, Any}","page":"Agents, Behaviors & Containers","title":"Fjage.delay","text":"delay(platform::Platform, millis)\n\nSleep for millis ms on the platform.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.deregister-Tuple{Agent, String}","page":"Agents, Behaviors & Containers","title":"Fjage.deregister","text":"deregister(a::Agent, svc::String)\n\nDeregister agent from providing a specied service.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.deregister-Tuple{Container, AgentID, String}","page":"Agents, Behaviors & Containers","title":"Fjage.deregister","text":"deregister(c::Container, aid::AgentID, svc::String)\n\nDeregister agent aid from providing service svc.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.deregister-Tuple{Container, AgentID}","page":"Agents, Behaviors & Containers","title":"Fjage.deregister","text":"deregister(c::Container, aid::AgentID)\n\nDeregister agent aid from providing any services.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.done-Tuple{Behavior}","page":"Agents, Behaviors & Containers","title":"Fjage.done","text":"done(b::Behavior)\n\nCheck if a behavior is completed.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.init-Tuple{Agent}","page":"Agents, Behaviors & Containers","title":"Fjage.init","text":"init(a::Agent)\n\nInitialization function for an agent. The default implementation calls setup(a), and adds a ParameterMessageBehavior to support agent parameters, a MessageBehavior that calls processrequest(a, msg) for REQUEST messages or processmessage(a, msg) for all other messages, and a OneShotBehavior that calls startup(a) once the agent is running. An agent may provide a method if these default behaviors are desired.\n\nExamples:\n\nusing Fjage\n\n@agent struct MyBareAgent end\n\nfunction Fjage.init(a::MyBareAgent)\n  @info \"MyBareAgent init\"\nend\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.isblocked-Tuple{Behavior}","page":"Agents, Behaviors & Containers","title":"Fjage.isblocked","text":"isblocked(b::Behavior)\n\nCheck if a behavior is currently blocked.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.isidle-Tuple{Container}","page":"Agents, Behaviors & Containers","title":"Fjage.isidle","text":"isidle(container::Container)\n\nCheck if container is idle. Unimplemented. Currently always returns true.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.isidle-Tuple{RealTimePlatform}","page":"Agents, Behaviors & Containers","title":"Fjage.isidle","text":"isidle(platform::Platform)\n\nCheck if platform is idle. Unimplemented. Currently always returns true.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.isrunning-Tuple{Container}","page":"Agents, Behaviors & Containers","title":"Fjage.isrunning","text":"isrunning(container::Container)\n\nCheck if the container is running.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.isrunning-Tuple{RealTimePlatform}","page":"Agents, Behaviors & Containers","title":"Fjage.isrunning","text":"isrunning(platform::Platform)\n\nCheck if platform is running.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.logerror","page":"Agents, Behaviors & Containers","title":"Fjage.logerror","text":"logerror()\nlogerror(src)\n\nLog current exception with a stack trace.\n\n\n\n\n\n","category":"function"},{"location":"container.html#Fjage.logerror-2","page":"Agents, Behaviors & Containers","title":"Fjage.logerror","text":"logerror(f::Function)\nlogerror(f::Function, src)\n\nRun function f() and log any errors that occur.\n\n\n\n\n\n","category":"function"},{"location":"container.html#Fjage.loglevel!-Tuple{Any}","page":"Agents, Behaviors & Containers","title":"Fjage.loglevel!","text":"loglevel!(level)\n\nSet log level. Supported levels include :debug, :info, :warn, :error, :none. The equivalent Julia Logging.Debug, Logging.Info, etc levels may also be used.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.name!-Tuple{Container, String}","page":"Agents, Behaviors & Containers","title":"Fjage.name!","text":"name!(container::Container, s)\n\nSet name of the container.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.name-Tuple{Agent}","page":"Agents, Behaviors & Containers","title":"Fjage.name","text":"name(a::Agent)\n\nGet the name of the agent.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.name-Tuple{Container}","page":"Agents, Behaviors & Containers","title":"Fjage.name","text":"name(container::Container)\n\nGet name of the container.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.nanotime-Tuple{Agent}","page":"Agents, Behaviors & Containers","title":"Fjage.nanotime","text":"nanotime(a::Agent)\n\nGet current time in nanoseconds for the agent.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.nanotime-Tuple{RealTimePlatform}","page":"Agents, Behaviors & Containers","title":"Fjage.nanotime","text":"nanotime(platform::Platform)\n\nGet current time in nanoseconds for the platform.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.platform-Tuple{Agent}","page":"Agents, Behaviors & Containers","title":"Fjage.platform","text":"platform(a::Agent)\n\nGet platform on which the agent's container is running.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.platform-Tuple{Container}","page":"Agents, Behaviors & Containers","title":"Fjage.platform","text":"platform(container::Container)\n\nGet platform on which the container is running.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.platformsend-Tuple{Agent, Message}","page":"Agents, Behaviors & Containers","title":"Fjage.platformsend","text":"platformsend(a::Agent, msg::Message)\n\nSend a message to agents running on all containers on a platform. Currently unimplemented.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.priority-Tuple{Behavior}","page":"Agents, Behaviors & Containers","title":"Fjage.priority","text":"priority(b::Behavior)\n\nGet the priority associated with a behavior.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.processmessage-Tuple{Agent, Any}","page":"Agents, Behaviors & Containers","title":"Fjage.processmessage","text":"processmessage(a::Agent, msg)\n\nUnless an agent overrides its init(a) function, the default behavior for an agent is to add a MessageBehavior that calls processmessage(a, msg) when it receives any message (with the exception of messages with performative REQUEST, for which processrequest(a, msg) is called instead). An agent may provide methods to handle specific messages.\n\nExamples:\n\nusing Fjage\n\nconst MySpecialNtf = MessageClass(@__MODULE__, \"MySpecialNtf\")\n\n@agent struct MyAgent end\n\nfunction Fjage.processmessage(a::MyAgent, msg::MySpecialNtf)\n  # do something useful with the message here...\nend\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.processrequest-Tuple{Agent, Any}","page":"Agents, Behaviors & Containers","title":"Fjage.processrequest","text":"processrequest(a::Agent, req)\n\nUnless an agent overrides its init(a) function, the default behavior for an agent is to add a MessageBehavior that calls processrequest(a, req) when it receives any message with a performative REQUEST. The return value of the function must be either nothing or a response message. If a response message is returned, it is sent. If nothing is returned, a default response with performative NOT_UNDERSTOOD is sent back. An agent may provide methods to handle specific messages. For unhandled requests, the default implementation just returns a nothing.\n\nExamples:\n\nusing Fjage\n\nconst MySpecialReq = MessageClass(@__MODULE__, \"MySpecialReq\", nothing, Performative.REQUEST)\n\n@agent struct MyAgent end\n\nfunction Fjage.processrequest(a::MyAgent, req::MySpecialReq)\n  # do something useful with the request here...\n  # and return an AGREE response\n  Message(req, Performative.AGREE)\nend\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.ps-Tuple{StandaloneContainer}","page":"Agents, Behaviors & Containers","title":"Fjage.ps","text":"ps(c::Container)\n\nGet a list of agents running in a container. The list contains tuples of agent name and agent type. The agent type may be an empty string for agents running in remote containers, if the containers do not support type query.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.queuesize!-Tuple{Agent, Any}","page":"Agents, Behaviors & Containers","title":"Fjage.queuesize!","text":"queuesize!(a::Agent, n)\n\nSet the incoming message queue size for an agent. Currently unimplemented.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.receive","page":"Agents, Behaviors & Containers","title":"Fjage.receive","text":"receive(a::Agent, timeout::Int=0; priority)\nreceive(a::Agent, filt, timeout::Int=0; priority)\n\nReceive a message, optionally matching the specified filter. The call blocks for at most timeout milliseconds, if a message is not available. If multiple receive() calls are concurrently active, the priority determines which call gets the message. Only one of the active receive() calls will receive the message. Returns a message or nothing.\n\nIf a filter filt is specified, only messages matching the filter trigger this behavior. A filter may be a message class or a function that takes the message as an argument and returns true to accept, false to reject.\n\nLower priority numbers indicate a higher priority.\n\n\n\n\n\n","category":"function"},{"location":"container.html#Fjage.register-Tuple{Agent, String}","page":"Agents, Behaviors & Containers","title":"Fjage.register","text":"register(a::Agent, svc::String)\n\nRegister agent as providing a specied service.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.register-Tuple{Container, AgentID, String}","page":"Agents, Behaviors & Containers","title":"Fjage.register","text":"register(c::Container, aid::AgentID, svc::String)\n\nRegister agent aid as providing service svc.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.removelistener-Tuple{Container, Any}","page":"Agents, Behaviors & Containers","title":"Fjage.removelistener","text":"removelistener(container::Container, listener)\n\nRemove message listener from container.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.request","page":"Agents, Behaviors & Containers","title":"Fjage.request","text":"request(a::Agent, msg::Message)\nrequest(a::Agent, msg::Message, timeout::Int)\n\nSend a request and wait for a response. If a timeout is specified, the call blocks for at most timeout milliseconds. If no timeout is specified, a system default is used. Returns the response message or nothing if no response received.\n\n\n\n\n\n","category":"function"},{"location":"container.html#Fjage.reset-Tuple{Behavior}","page":"Agents, Behaviors & Containers","title":"Fjage.reset","text":"reset(b::Behavior)\n\nResets a behavior, removing it from an agent running it. Once a behavior is reset, it may be reused later by adding it to an agent.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.restart-Tuple{Behavior}","page":"Agents, Behaviors & Containers","title":"Fjage.restart","text":"restart(b::Behavior)\n\nRestart a blocked behavior, previous blocked by block(b).\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.send-Tuple{Agent, Message}","page":"Agents, Behaviors & Containers","title":"Fjage.send","text":"send(a::Agent, msg::Message)\n\nSend a message from agent a.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.send-Tuple{Container, Any}","page":"Agents, Behaviors & Containers","title":"Fjage.send","text":"send(c::Container, msg)\n\nSend message msg to recipient specified in the message. Return true if the message is accepted for delivery, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.services-Tuple{Container}","page":"Agents, Behaviors & Containers","title":"Fjage.services","text":"services(container::Container)\n\nGet list of services running in the container.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.setup","page":"Agents, Behaviors & Containers","title":"Fjage.setup","text":"setup(a::Agent)\n\nUnless an agent overrides its init(a) function, the default behavior for an agent is to call setup(a) during initialization, and startup(a) once the agent is running. Typically, the setup(a) function is used to register services, and the startup(a) function is used to lookup services from other agents. Behaviors may be added in either of the functions.\n\nExamples:\n\nusing Fjage\n\n@agent struct MyAgent end\n\nfunction Fjage.setup(a::MyAgent)\n  @info \"MyAgent setting up\"\nend\n\nfunction Fjage.startup(a::MyAgent)\n  @info \"MyAgent started\"\nend\n\n\n\n\n\n","category":"function"},{"location":"container.html#Fjage.shutdown-Tuple{Agent}","page":"Agents, Behaviors & Containers","title":"Fjage.shutdown","text":"shutdown(a::Agent)\n\nThis function is called when an agent terminates. An agent may provide a method to handle termination, if desired.\n\nExamples:\n\nusing Fjage\n\n@agent struct MyAgent end\n\nfunction Fjage.shutdown(a::MyAgent)\n  @info \"MyAgent shutting down\"\nend\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.shutdown-Tuple{RealTimePlatform}","page":"Agents, Behaviors & Containers","title":"Fjage.shutdown","text":"shutdown(platform::Platform)\n\nStop the platform and all containers running on the platform.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.shutdown-Tuple{StandaloneContainer}","page":"Agents, Behaviors & Containers","title":"Fjage.shutdown","text":"shutdown(container::Container)\n\nStop a container and all agents running in it.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.start-Tuple{RealTimePlatform}","page":"Agents, Behaviors & Containers","title":"Fjage.start","text":"start(platform::Platform)\n\nStart the platform and all containers running on the platform.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.start-Tuple{StandaloneContainer}","page":"Agents, Behaviors & Containers","title":"Fjage.start","text":"start(container::Container)\n\nStart a container.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.startup","page":"Agents, Behaviors & Containers","title":"Fjage.startup","text":"setup(a::Agent)\n\nUnless an agent overrides its init(a) function, the default behavior for an agent is to call setup(a) during initialization, and startup(a) once the agent is running. Typically, the setup(a) function is used to register services, and the startup(a) function is used to lookup services from other agents. Behaviors may be added in either of the functions.\n\nExamples:\n\nusing Fjage\n\n@agent struct MyAgent end\n\nfunction Fjage.setup(a::MyAgent)\n  @info \"MyAgent setting up\"\nend\n\nfunction Fjage.startup(a::MyAgent)\n  @info \"MyAgent started\"\nend\n\n\n\n\n\n\n\n","category":"function"},{"location":"container.html#Fjage.state-Tuple{Container}","page":"Agents, Behaviors & Containers","title":"Fjage.state","text":"state(container::Container)\n\nGet a human-readable state of the container.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.stop-Tuple{Agent}","page":"Agents, Behaviors & Containers","title":"Fjage.stop","text":"stop(a::Agent)\nstop(a::Agent, msg)\n\nTerminates an agent, optionally with an error message to be logged, explaining the reason for termination.\n\nExamples:\n\nusing Fjage\n\n@agent struct MyAgent\n  criticalagent::Union{AgentID,Nothing} = nothing\nend\n\nfunction Fjage.startup(a::MyAgent)\n  a.criticalagent = agentforservice(\"CriticalService\")\n  a.criticalagent === nothing && return stop(a, \"Could not find an agent providing CriticalService\")\n  @info \"MyAgent up and running\"\nend\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.stop-Tuple{Behavior}","page":"Agents, Behaviors & Containers","title":"Fjage.stop","text":"stop(b::Behavior)\n\nTerminates a behavior.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.store-Tuple{Agent}","page":"Agents, Behaviors & Containers","title":"Fjage.store","text":"store(a::Agent)\n\nReturn the persistent data store for agent. Currently unimplemented.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.subscribe-Tuple{Agent, AgentID}","page":"Agents, Behaviors & Containers","title":"Fjage.subscribe","text":"subscribe(a::Agent, topic::AgentID)\n\nSubscribe agent to specified topic.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.subscribe-Tuple{StandaloneContainer, AgentID, Agent}","page":"Agents, Behaviors & Containers","title":"Fjage.subscribe","text":"subscribe(c::Container, topic::AgentID, agent::Agent)\n\nSubscribe agent running in container c to topic.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.tickcount-Tuple{PoissonBehavior}","page":"Agents, Behaviors & Containers","title":"Fjage.tickcount","text":"tickcount(b::PoissonBehavior)\n\nGet the number of times a PoissonBehavior has ticked (its action() has been called).\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.tickcount-Tuple{TickerBehavior}","page":"Agents, Behaviors & Containers","title":"Fjage.tickcount","text":"tickcount(b::TickerBehavior)\n\nGet the number of times a TickerBehavior has ticked (its action() has been called).\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.unsubscribe-Tuple{Agent, AgentID}","page":"Agents, Behaviors & Containers","title":"Fjage.unsubscribe","text":"unsubscribe(a::Agent, topic::AgentID)\n\nUnsubscribe agent from specified topic.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.unsubscribe-Tuple{SlaveContainer, Agent}","page":"Agents, Behaviors & Containers","title":"Fjage.unsubscribe","text":"unsubscribe(c::Container, agent::Agent)\n\nUnsubscribe agent running in container c from all topics.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.unsubscribe-Tuple{StandaloneContainer, Agent}","page":"Agents, Behaviors & Containers","title":"Fjage.unsubscribe","text":"unsubscribe(c::Container, topic::AgentID, agent::Agent)\n\nUnsubscribe agent running in container c from topic.\n\n\n\n\n\n","category":"method"},{"location":"container.html#Fjage.@agent-Tuple{Any}","page":"Agents, Behaviors & Containers","title":"Fjage.@agent","text":"The @agent macro is used to define a Fjage agent. The macro takes in a struct definition and converts it into an agent definition. The fields in the struct are treated as agent attributes. Fjage agent types are subtypes of Fjage.Agent and are mutable.\n\nThe struct definition may include initialization, as supported by the Base.@kwdef macro.\n\nExamples:\n\nusing Fjage\n\n@agent struct MyAgent\n  field1::Int = 1\n  field2::String = \"hello\"\nend\n\nabstract type SpecialAgent <: Fjage.Agent end\n\n@agent struct MySpecialAgent <: SpecialAgent\n  agentnumber::Int = 007\n  licensedtokill::Bool = true\nend\n\n\n\n\n\n","category":"macro"},{"location":"index.html#Fjage.jl","page":"Home","title":"Fjage.jl","text":"","category":"section"},{"location":"index.html#Framework-for-Julia,-Java-and-Groovy-agents","page":"Home","title":"Framework for Julia, Java and Groovy agents","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = Fjage","category":"page"},{"location":"index.html#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"fj√•ge provides a lightweight and easy-to-learn framework for agent-oriented software development in Java and Groovy. Fjage.jl is a Julia port of fj√•ge, which can be independently used, or used in conjunction with a Java/Groovy container in a multi-language application.","category":"page"},{"location":"index.html#Key-features","page":"Home","title":"Key features","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Lightweight and fast\nEasy to learn, and rapid agent development cycle\nAgent development in Julia, Java or Groovy\nAPIs for access from Java, Groovy, Python, C, Julia, and Javascript\nJSON-based protocol to interface with external applications","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"In Julia REPL:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> # press \"]\" to enter package manager\npkg> add Fjage","category":"page"},{"location":"index.html#Useful-reading","page":"Home","title":"Useful reading","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"fj√•ge home\nfj√•ge developer's guide\nfj√•ge gateway API specifications","category":"page"}]
}
